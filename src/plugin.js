const t = require('@babel/types');

function createLogStatement(...args) {
  return t.callExpression(
    t.memberExpression(
      t.identifier('console'),
      t.identifier('log')
    ),
    [...args]
  )
}

const tomAscii = " \n" +
" .----------------.  .----------------.  .----------------.   .----------------.  .----------------.  .----------------.  .----------------.  \n" +
"| .--------------. || .--------------. || .--------------. | | .--------------. || .--------------. || .--------------. || .--------------. |\n" +
"| |  _________   | || |     ____     | || | ____    ____ | | | |    _______   | || |      __      | || |  ____  ____  | || |    _______   | |\n" +
"| | |  _   _  |  | || |   .'    `.   | || ||_   \\  /   _|| | | |   /  ___  |  | || |     /  \\     | || | |_  _||_  _| | || |   /  ___  |  | |\n" +
"| | |_/ | | \\_|  | || |  /  .--.  \\  | || |  |   \\/   |  | | | |  |  (__ \\_|  | || |    / /\\ \\    | || |   \\ \\  / /   | || |  |  (__ \\_|  | |\n" +
"| |     | |      | || |  | |    | |  | || |  | |\\  /| |  | | | |   '.___`-.   | || |   / ____ \\   | || |    \\ \\/ /    | || |   '.___`-.   | |\n" +
"| |    _| |_     | || |  \\  `--'  /  | || | _| |_\\/_| |_ | | | |  |`\\____) |  | || | _/ /    \\ \\_ | || |    _|  |_    | || |  |`\\____) |  | |\n" +
"| |   |_____|    | || |   `.____.'   | || ||_____||_____|| | | |  |_______.'  | || ||____|  |____|| || |   |______|   | || |  |_______.'  | |\n" +
"| |              | || |              | || |              | | | |              | || |              | || |              | || |              | |\n" +
"| '--------------' || '--------------' || '--------------' | | '--------------' || '--------------' || '--------------' || '--------------' |\n" +
" '----------------'  '----------------'  '----------------'   '----------------'  '----------------'  '----------------'  '----------------' ";

module.exports = function testPlugin(babel) {
  return {
    visitor: {
      CallExpression(path) {
        if (path.node.callee && path.node.callee.object.name === 'console'
          && path.node.callee.property.name === 'tom') {

          path.replaceWithMultiple([
            createLogStatement(t.stringLiteral('----------------')),
            createLogStatement(...path.node.arguments),
            createLogStatement(t.stringLiteral('----------------')),
            createLogStatement(t.stringLiteral(tomAscii)),
          ]);
        }
      }
    }
  };
};
